"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncodableOptimizedFibonacciRange=void 0;const FibonacciIntegerRangeEncoder_js_1=require("./encoder/FibonacciIntegerRangeEncoder.js"),FixedBitfieldEncoder_js_1=require("./encoder/FixedBitfieldEncoder.js"),FixedIntegerEncoder_js_1=require("./encoder/FixedIntegerEncoder.js"),AbstractEncodableBitStringDataType_js_1=require("./AbstractEncodableBitStringDataType.js"),EncodableFibonacciIntegerRange_js_1=require("./EncodableFibonacciIntegerRange.js");class EncodableOptimizedFibonacciRange extends AbstractEncodableBitStringDataType_js_1.AbstractEncodableBitStringDataType{constructor(e){super(),this.setValue(e)}encode(){let e=this.value.length>0?this.value[this.value.length-1]:0,n=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.encode(this.value),t=e;if(n.length<=t)return FixedIntegerEncoder_js_1.FixedIntegerEncoder.encode(e,16)+"1"+n;{let n=[],i=0;for(let t=0;t<e;t++)t==this.value[i]-1?(n[t]=!0,i++):n[t]=!1;return FixedIntegerEncoder_js_1.FixedIntegerEncoder.encode(e,16)+"0"+FixedBitfieldEncoder_js_1.FixedBitfieldEncoder.encode(n,t)}}decode(e){if("1"===e.charAt(16))this.value=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.decode(e.substring(17));else{let n=[],t=FixedBitfieldEncoder_js_1.FixedBitfieldEncoder.decode(e.substring(17));for(let e=0;e<t.length;e++)!0===t[e]&&n.push(e+1);this.value=n}}substring(e,n){let t=FixedIntegerEncoder_js_1.FixedIntegerEncoder.decode(e.substring(n,n+16));return"1"===e.charAt(n+16)?e.substring(n,n+17)+new EncodableFibonacciIntegerRange_js_1.EncodableFibonacciIntegerRange([]).substring(e,n+17):e.substring(n,n+17+t)}getValue(){return[...super.getValue()]}setValue(e){super.setValue(Array.from(new Set(e)).sort(((e,n)=>e-n)))}}exports.EncodableOptimizedFibonacciRange=EncodableOptimizedFibonacciRange;