"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncodableFibonacciIntegerRange=void 0;const FibonacciIntegerRangeEncoder_js_1=require("./encoder/FibonacciIntegerRangeEncoder.js"),FixedIntegerEncoder_js_1=require("./encoder/FixedIntegerEncoder.js"),AbstractEncodableBitStringDataType_js_1=require("./AbstractEncodableBitStringDataType.js");class EncodableFibonacciIntegerRange extends AbstractEncodableBitStringDataType_js_1.AbstractEncodableBitStringDataType{constructor(e){super(),this.setValue(e)}encode(){return FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.encode(this.value)}decode(e){this.value=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.decode(e)}substring(e,n){let r=FixedIntegerEncoder_js_1.FixedIntegerEncoder.decode(e.substring(n,n+12)),t=n+12;for(let n=0;n<r;n++)t="1"===e.charAt(t)?e.indexOf("11",e.indexOf("11",t+1)+2)+2:e.indexOf("11",t+1)+2;return e.substring(n,t)}getValue(){return[...super.getValue()]}setValue(e){super.setValue(Array.from(new Set(e)).sort(((e,n)=>e-n)))}}exports.EncodableFibonacciIntegerRange=EncodableFibonacciIntegerRange;